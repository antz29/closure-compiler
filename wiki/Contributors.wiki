#summary Guidelines for submitting patches to Closure Compiler

=== So! You Want to Submit a Patch? ===

Getting patches into Closure Compiler should be relatively pain-free. We are still ramping up the process for accepting patches, so it may be slow at first. And if it is, you should complain loudly. Complaining is the only way to ensure that things get better. 

This page should help guide you through the submitting process. We assume the reader already knows how to complain.

=== Lifecycle of a Patch ===

To submit a patch, create a bug entry on the [http://code.google.com/p/closure-compiler/issues/list issues list] and attach your diff. You will need to sign a [http://code.google.com/p/closure-compiler/source/browse/trunk/CONTRIBUTORS Contributor License Agreement] if you haven't done so. One of the committers will accept the patch. They may ask you questions about the change, or request improvements. Once they agree to the patch, they will begin the patch process.

  # The committer will apply the patch, and send the change to a committer machine.
  # The committer machine will run all the unit tests by running `ant test`
  # The committer machine will compile some large JavaScript binaries, then run them on Internet Explorer and Firefox via a [http://seleniumhq.org/ Selenium] job.
  # If all tests pass, the committer machine will commit the change to Google's internal repository.
  # Commits to Google's internal repository will get automatically replicated to the SVN repository on code.google.com. 

Right now, the process is tied to some QA processes that are internal to Google. One of those "large JS binaries" mentioned above is also known as "the Gmail JavaScript code base", and it's unlikely that those codebases will become open. We also haven't opened up the process for starting Selenium and testing a compiled JavaScript binary. (The care and feeding of Selenium jobs is feasible, but not easy). 

We have ideas on how to improve this for non-Google contributors. For example, we'd like to have a process so that you can commit a change to SVN, and that change will automatically get sent to Google-maintained QA machines. But until that happens, only Googlers can truly commit patches to trunk.

=== How to Get Your Patch Accepted ===

A few pointers on how to get your patch accepted:
  * Run `ant test` and ensure your patch passes all unit tests.
  * Write a unit test that demonstrates your patch. We do not accept patches without tests--tests are the best way to ensure that future contributors do not break your code accidentally.
  * Follow the coding conventions (below)

=== Coding Conventions ===

For the most part, we try to follow [http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html Sun's Coding Conventions for the Java Programming Language], with a few exceptions.

  * We use 2 space indents for blocks. We never use tabs. 
  * All files must begin with the standard Apache License 2.0 header.
  * Lines of code may not exceed 80 characters. There are a few exceptions to this rule, mostly due to syntax that can't be broken across lines (imports, URLs, etc.)

When in doubt, please be consistent with the other code in the codebase. We realize that style rules are largely arbitrary, and are not necessarily better or worse than what you may be used to. We have style rules to ensure that the code is consistent and easy to read, not because we favor one particular style over another.