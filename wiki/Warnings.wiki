#summary How to tell closure compiler which warnings you want

== Introduction ==

Closure Compiler has a `--warnings_level` flag that gives you a few high-level options to control what warnings you see. The `--warning_level` flag gives you an easy way to choose the most common options. But even `--warning_level=VERBOSE` doesn't give you all the warnings that Closure Compiler can emit, and sometimes you want more fine-grained control.

== Warnings Level API ==

Closure Compiler has an API for configuring the errors and warnings that you would like to see, and what level they're emitted at. 

|| *Flag API* || *Java API* || *Effect* ||
|| `--jscomp_error=<type>` || `options.setWarningLevel(<type>, CheckLevel.ERROR);` || Makes all warnings of the given type to build-breaking error. ||
|| `--jscomp_warning=<type>` || `options.setWarningLevel(<type>, CheckLevel.WARNING);` || Makes all warnings of the given type a non-breaking warning. ||
|| `--jscomp_off=<type>` || `options.setWarningLevel(<type>, CheckLevel.OFF);` || Silences all warnings of the given type. ||

== Warnings Categories ==

In the examples above, `<type>` is a pre-defined category of warnings.

|| *Flag API* || *Java API* || *Effect* || *Default Value* ||
|| deprecated || `DiagnosticGroups.DEPRECATED` || Warnings when non-deprecated code accesses code that's marked @deprecated || OFF ||
|| visibility || `DiagnosticGroups.VISIBILITY` || Warnings when @private and @protected are violated. || OFF ||
|| accessControls || `DiagnosticGroups.ACCESS_CONTROLS` || Warnings when @deprecated, @private, or @protected are violated. || OFF ||
|| fileoverviewTags || `DiagnosticGroups.FILEOVERVIEW_JSDOC` || Warnings about duplicate @fileoverview tags || WARNING ||
|| strictModuleDepCheck	|| `DiagnosticGroups.STRICT_MODULE_DEP_CHECK `|| Warnings about all references potentially violating module dependencies || OFF ||
|| missingProperties || `DiagnosticGroups.MISSING_PROPERTIES` || Warnings about whether a property will ever be defined on an object. Part of type-checking. || OFF ||
|| unknownDefines || `DiagnosticGroups.UNKNOWN_DEFINES` || Warnings when unknown @define values are specified. || WARNING ||
|| checkTypes || `DiagnosticGroups.CHECK_TYPES` || Type-checking || OFF by default, WARNING on `--warning_level=VERBOSE` ||

== Defining Your Own Categories ==

If there is a category of warnings that you would like to configure but is not listed in the table above, it is easy to define a new one.

   1. Find the unique identifier of the warnings that you'd like to configure.
   2. Create a new [http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/DiagnosticGroup.java DiagnosticGroup] that gives this warning category a human-readable name, and add it to our central repository of warnings categories:
      http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/DiagnosticGroups.java
   3. Send us a patch!

This is how we "canary" new warnings until we feel they're stable.

== @suppress Tags ==

You can also silence warnings by adding JSDoc annotations to your code. All of the warnings categories above can be used in a @suppress tag in a @fileoverview JSDoc comment or a function JSDoc comment. For example,

{{{
/**
 * @fileoverview This is a file where deprecation checks are disabled.
 * @suppress {deprecated}
 */

/**
 * This is a function where type checking is disabled.
 * @suppress {checkTypes}
 */
function f() { /** ... */ }
}}}

There is also one warning category that you can suppress with @suppress tags, but is not available from the command-line.

{{{
/** @suppress {duplicate} */ foo.prop = ...
}}}
Suppresses warnings about a declaration of the same method or property twice in the global scope.